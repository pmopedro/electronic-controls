/*
==============================================================================
RAMPA DIGITAL DE 8 BITS
Este código faz um sinal de rampa através de 8 saídas digitais do Arduino Uno. 
==============================================================================
Por Lucas Ribeiro de Oliveira.
PED da disciplina EE641 - Lab. de eltrônica básica II
==============================================================================
*/

unsigned char v01[] = {0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D, 0x8F, 0x8F, 0x8D, 0x89, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x91, 0xA1, 0xC1, 0xE1, 0xFE, 0xFE, 0xE0, 0xC0, 0xA1, 0x91, 0x81, 0x71, 0x69, 0x67, 0x61, 0x55, 0x55, 0x59, 0x61, 0x67, 0x6B, 0x71, 0x75, 0x75, 0x79, 0x7B, 0x7D, 0x7F, 0x7F, 0x7F, 0x7F, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v02[] = {0x81, 0x81, 0x71, 0x61, 0x41, 0x21, 0x10, 0x20, 0x30, 0x50, 0x61, 0x85, 0x8D, 0x97, 0x99, 0x9B, 0x99, 0x95, 0x93, 0x8D, 0x8B, 0x89, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0x61, 0x41, 0x21, 0x10, 0x20, 0x30, 0x50, 0x61, 0x85, 0x8D, 0x97, 0x99, 0x9B, 0x99, 0x95, 0x93, 0x8D, 0x8B, 0x89, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0x61, 0x41, 0x21, 0x10, 0x20, 0x30, 0x50, 0x61, 0x85, 0x8D, 0x97, 0x99, 0x9B, 0x99, 0x95, 0x93, 0x8D, 0x8B, 0x89, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0x61, 0x41, 0x21, 0x10, 0x20, 0x30, 0x50, 0x61, 0x85, 0x8D, 0x97, 0x99, 0x9B, 0x99, 0x95, 0x93, 0x8D, 0x8B, 0x89, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v03[] = {0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D, 0x8F, 0x8F, 0x8D, 0x89, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D, 0x8F, 0x8F, 0x8D, 0x89, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v04[] = {0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x89, 0x87, 0x85, 0x83, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x83, 0x85, 0x87, 0x87, 0x89, 0x89, 0x8B, 0x8D, 0x8F, 0x91, 0x93, 0x95, 0x95, 0x95, 0x93, 0x91, 0x8B, 0x87, 0x85, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v05[] = {0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x83, 0x87, 0x89, 0x8D, 0x91, 0x93, 0x95, 0x95, 0x8F, 0x83, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x83, 0x87, 0x89, 0x8D, 0x91, 0x93, 0x95, 0x95, 0x8F, 0x83, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x83, 0x87, 0x89, 0x8D, 0x91, 0x93, 0x95, 0x95, 0x8F, 0x83, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x83, 0x87, 0x89, 0x8D, 0x91, 0x93, 0x95, 0x95, 0x8F, 0x83, 0x81};

unsigned char v06[] = {0x84, 0x90, 0x9B, 0x8B, 0x79, 0x73, 0x65, 0x63, 0x65, 0x6B, 0x79, 0x85, 0x97, 0xA5, 0xA1, 0x95, 0x6A, 0x60, 0x5F, 0x63, 0x67, 0x73, 0x7B, 0x79, 0x79, 0x77, 0x7B, 0x81, 0x89, 0x8F, 0x91, 0x8F, 0x8C, 0x7E, 0x67, 0x5F, 0x59, 0x61, 0x6F, 0x7B, 0x81, 0x9B, 0x9F, 0xA1, 0x9F, 0x95, 0x79, 0x6F, 0x6A, 0x6A, 0x6F, 0x75, 0x81, 0x95, 0x9D, 0x9F, 0x95, 0x8D, 0x6B, 0x5B, 0x57, 0x51, 0x5D, 0x63, 0x66, 0x72, 0x7B, 0x7F, 0x83, 0x87, 0x89, 0x8F, 0x93, 0x95, 0x9B, 0xA1, 0xA7, 0xA9, 0xAB, 0xA7, 0x8A, 0x6A, 0x67, 0x69, 0x69, 0x71, 0x75, 0x75, 0x73, 0x71, 0x71, 0x75, 0x8B, 0x93, 0x8F, 0x95, 0x8E, 0x86, 0x75, 0x65, 0x61, 0x65, 0x6D, 0x7B, 0x87, 0x91, 0xA7, 0xB1, 0xB1, 0xA9, 0x97, 0x7B, 0x6E, 0x64, 0x65, 0x69, 0x75, 0x7F, 0x85, 0x8F, 0x93, 0x95, 0x91, 0x89, 0x83, 0x83, 0x81, 0x83};

unsigned char v07[] = {0x81, 0x83, 0x85, 0x83, 0x7D, 0x7F, 0x83, 0x81, 0x83, 0x85, 0x87, 0x83, 0x7F, 0x7D, 0x7D, 0x83, 0x83, 0x85, 0x83, 0x77, 0xFE, 0x66, 0x82, 0x80, 0x81, 0x83, 0x85, 0x83, 0x7D, 0x7F, 0x83, 0x85, 0x87, 0x8D, 0x93, 0x97, 0x95, 0x91, 0x93, 0x8F, 0x89, 0x87, 0x81, 0x83, 0x7F, 0x7D, 0x7F, 0x81, 0x85, 0x83, 0x7D, 0x7F, 0x77, 0x7F, 0x83, 0x85, 0x87, 0x89, 0x85, 0x81, 0x7D, 0x85, 0x87, 0x81, 0x87, 0x89, 0x87, 0x83, 0x7D, 0x77, 0x79, 0x7D, 0x83, 0x81, 0x85, 0x83, 0x89, 0x8F, 0x89, 0x7D, 0x79, 0x79, 0x7D, 0x81, 0x83, 0x7F, 0x81, 0x7B, 0x77, 0x71, 0xFE, 0x50, 0x82, 0x84, 0x89, 0x85, 0x79, 0x85, 0x85, 0x87, 0x8D, 0x8F, 0x95, 0x93, 0x91, 0x8D, 0x8D, 0x89, 0x83, 0x85, 0x89, 0x81, 0x7D, 0x7F, 0x79, 0x87, 0x85, 0x83, 0x81, 0x85, 0x79, 0x89, 0x85, 0x83, 0x87, 0x89, 0x85, 0x83};

unsigned char v08[] = {0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D, 0x8F, 0x8F, 0x8D, 0x89, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0x61, 0x41, 0x21, 0x10, 0x20, 0x30, 0x50, 0x61, 0x85, 0x8D, 0x97, 0x99, 0x9B, 0x99, 0x95, 0x93, 0x8D, 0x8B, 0x89, 0x87, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v09[] = {0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x89, 0x8D, 0x81, 0x71, 0x61, 0x41, 0x21, 0x10, 0x20, 0x30, 0x50, 0x61, 0x85, 0x8D, 0x97, 0x99, 0x9B, 0x99, 0x95, 0x93, 0x8D, 0x8B, 0x89, 0x87, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v10[] = {0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D, 0x8F, 0x8F, 0x8D, 0x89, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xC0, 0x76, 0x5E, 0x44, 0x27, 0x27, 0x45, 0x5F, 0x77, 0x81, 0x91, 0x99, 0x9B, 0xA1, 0xAD, 0xAD, 0xA7, 0xA1, 0x9B, 0x97, 0x91, 0x8D, 0x89, 0x85, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v11[] = {0x81, 0x71, 0x61, 0x41, 0x21, 0x10, 0x20, 0x30, 0x50, 0x61, 0x85, 0x8D, 0x97, 0x99, 0x9B, 0x99, 0x95, 0x93, 0x8D, 0x8B, 0x89, 0x87, 0x85, 0x83, 0x81, 0x81, 0x71, 0x61, 0x51, 0x30, 0x44, 0x66, 0x76, 0x81, 0x87, 0x8B, 0x95, 0x9B, 0xA1, 0xA1, 0x9D, 0x99, 0x95, 0x8D, 0x8B, 0x89, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x91, 0xA1, 0xC1, 0xE1, 0xFE, 0xFE, 0xE0, 0xC0, 0xA1, 0x91, 0x81, 0x71, 0x69, 0x67, 0x61, 0x55, 0x55, 0x59, 0x61, 0x67, 0x6B, 0x71, 0x75, 0x75, 0x79, 0x7B, 0x7D, 0x7F, 0x7F, 0x7F, 0x7F, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};

unsigned char v12[] = {0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x87, 0x87, 0x89, 0x87, 0x87, 0x85, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x71, 0xFE, 0x54, 0x7C, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x83, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D, 0x8F, 0x8F, 0x8D, 0x89, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81};


void setup() {
 // Função para realizar o setup do arduino (roda uma única vez)
 
 DDRD = B11111111; // Condifura todo registrador da porta D como saída. 
 // Equivale a fazer pinMode(porta, OUTPUT) para porta = 1 a 8. 
 Serial.begin(9600);
 PORTD = B00000000; // Seta todo registrador D como saúda (OUTPUT)       // Delay inicial de 3s
}

void loop() {
  // Função que roda na forma de loop infinito
  
  PORTD = B00000000; // Seta todo registrador D como saúda (OUTPUT)
  delay(3000);       // Delay inicial de 3s
  
  // Vetor com os valores de saída desejados
  int vetor[] = {0, 1, 3, 7, 15, 31, 63, 127, 255}; 
  int tam = sizeof(vetor) / sizeof(int); // Obtém o tamanho do vetor

  // repetição para percorrer todo vetor
  for (int i=0; i < tam; i++){
   PORTD = vetor[i]; // Fornece o valor desejado no registrador PORTD, 
   //de forma sequencial, a partir do incremente de i
   delay(500); // Delay de 1s
  }
}